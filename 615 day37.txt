update()
-------
to add the multiple items into the dict object and to update multiple dict object values at a time.

	dictobj.update(dictobj)

>>> x={'m':56,'sc':67,'tel':41,'eng':45}
>>> x
{'m': 56, 'sc': 67, 'tel': 41, 'eng': 45}
>>> x.update({'sc':32,'hin':78,'m':90,'so':71})
>>> x
{'m': 90, 'sc': 32, 'tel': 41, 'eng': 45, 'hin': 78, 'so': 71}


merge the two dict objects?
---------------------------
	this feature is available from python3.5+ versions onwards.

>>> x={'a':6,'b':2}
>>> y={'c':1,'d':5}
>>> {**x,**y}
{'a': 6, 'b': 2, 'c': 1, 'd': 5}

note:
----
from python 3.9 version onwards in dict class to introduce two new operators,

	|	-->	merge

	|=	-->	update

ex: merge
---
>>> x={'a':6,'b':2}
>>> y={'c':1,'d':5}
>>> {**x,**y}
{'a': 6, 'b': 2, 'c': 1, 'd': 5}
>>> x|y
{'a': 6, 'b': 2, 'c': 1, 'd': 5}

ex: update
---
>>> x={'a':6,'b':2}
>>> y={'c':1,'d':5}
>>> x.update(y)
>>> x
{'a': 6, 'b': 2, 'c': 1, 'd': 5}

>>> p={'a':6,'b':2}
>>> q={'c':1,'d':5}
>>> p|=q
>>> p
{'a': 6, 'b': 2, 'c': 1, 'd': 5}

dict comprihension:
------------------
	to generate the item's into the dict object by writeing some logic in that dict object is known as a dict comprihension.

	we can implement the dict comprihension to required minimum one for loop and one dict object.

ex1:
---
wap to generate the items(keys are even nunbers and values are odd numbers) into the dict object from 1-N natural numbers?

num=int(input("enter your number: "))
x={}
for i in range(1,num+1):
    if i%2==0:
        x[i]=i-1
print(x)

	(or)

num=int(input("enter your number: "))
print({i:i-1 for i in range(1,num+1) if i%2==0})


output:
------
enter your number: 10
{2: 1, 4: 3, 6: 5, 8: 7, 10: 9}

ex2:
---
wap to generate the items(keys are elements and values are no.of occurencess) into the dict object from the given list object?

x=eval(input("enter your list: "))
y={}
for ele in x:
    y[ele]=x.count(ele)
print(y)

	(or)

x=eval(input("enter your list: "))
print({ele:x.count(ele) for ele in x})

output:
------
enter your list: [10,20,10,30,40,10,20,30,10,30]
{10: 4, 20: 2, 30: 3, 40: 1}


ex3:
---
wap to generate the items(key's are words and values are length of that words) into dict object from the given string object?

x=input("enter your string: ")
words=x.split()
y={}
for w in words:
    y[w]=len(w)
print(y)

	(or)

x=input("enter your string: ")
words=x.split()
print({w:len(w) for w in words})


output:
-----
enter your string: hai siva krishna good evening
{'hai': 3, 'siva': 4, 'krishna': 7, 'good': 4, 'evening': 7}

differencess between List and Tuple
------------------------------------
		List
		----
1).List object is a Mutable object
2).we can create a list by using [ ] or list()
3).list object supporting comprihension
4).on top of the list object we can perform    insert,delete,update and retreive operations.
5).we can't assign list object as a key to the dict object.
6).list object is a variable size
7).list performance is slow when compared to tuple

		Tuple
		------
1).Tuple object is a Immutable object
2).we can create a tuple by using ( ) or tuple()
3).tuple object don't supporting comprihension
4).on top of the tuple object we can perform only retreival    operation.
5).we can assign tuple object as a key to the dict object.
6).tuple object is a fixed size
7).tuple performance is faster when compared to list

differencess between set and frozenset:
---------------------------------------
		set
		---
1).set object is a mutable object but it allows only immutable objects.

2).we can create set object by using set()

3).on top of the set object we can perform insert and delete operations.

4).set object dont allows another set object

5).we can't assign set object as a key to the another dict object.

6).set object supporting comprihension

7).set object is a variable size

		frozenset
		---------
1).frozenset object is a immutable object but it allows only immutable objects.

2).we can create a frozenset object by using frozenset()

3).on top of the frozenset object we can't perform insert and    delete operations.

4).frozenset object allows another frozenset object

5).we can assign the frozenset object as a key to the dict    object

6).the frozenset object dont supporting comprihension

7).the frozenset object is a fixed size



