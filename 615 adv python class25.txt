Runtime Errors:
---------------
	The error which occure after starting the program execution,that type of error's are called Runtime Errors.

	the runtime errors technically we are calling as Exceptions.

	if any runtime error occured in our python program,in that case our python program execution will be terminates abnormally.

what is abnormal termination?
-----------------------------
	the program execution will be terminates at the time of middle of the program execution,is known as a abnormal termination.

ex:
---
print("hai")
x=int(input("enter x value: "))
y=int(input("enter y value: "))
z=x/y
print(z)
print("bye")


output: normal termination
-----
hai
enter x value: 3
enter y value: 2
1.5
bye

output: abnormal termination
------
hai
enter x value: 3
enter y value: 0
Traceback (most recent call last):
  File "C:/Python310/e.py", line 4, in <module>
    z=x/y
ZeroDivisionError: division by zero

what are the reasons to get the runtime errors?
-----------------------------------------------
	invalid syntax
	invalid logic
	invalid data
	division by zero
	index out of range
	missing key
	module not available
	file does not existed
	file already existed
	memory issue
	....
	....etc.,

types of exceptions:
-------------------
	in generally,the exceptions can be categorized into two types,they are

	1).Builtin/predefined exceptions

	2).User-defined exceptions

Builtin/predefined exceptions:
-------------------------------
	these exception's are already predefined,every builtin exception haveing it's own class,the builtin exception's are automatically raised whenever exception will be occured but we can handle the builtin exceptions manually.

what is Exception Handling?
---------------------------
	whenever exception/Runtime Error will be occured then immediately to identify which exception will be occured,create that exception class objects,Receveing that exception class object and forwarding it,this process is called Exception handling.

how to handle the Exceptions?
----------------------------
	we can handle the exceptions by using try,except and finally blocks.

try block:
---------
	we can define any block,which is preceeded by try keyword,that block is called try block.

	try:
	   stmt_1
	   stmt_2
	   ......
	   stmt_n

which statements causes to runtime errors and which statements execution is depends on runtime error occured statements,that type of statements we are represented in try block.

if any exception occured in our try-block,then immediately our try block to identify which exception is occured,Receveing that exception class object and forwarding to the except block.

except block:
------------
	we can define any block which is preceeded by except keyword that block is called except block.

	in except block we can write the user-friendly messages to the user/developer related to that particular exception.

the except block can be categorized into two types,they are

	1).Default except block

	2).Named except block

Default except block:
--------------------
	the Default except block can handle any type of exceptions.

	except:
	    stmt_1
	    stmt_2
	    .....
	    stmt_n

note:
----
if any exception occured in our try block then only control will goto except block otherwise the control dont goto the except block.

ex1:
---
print("hai")
x=int(input("enter x value: "))
y=int(input("enter y value: "))
try:
    z=x/y
    print(z)
except:
    print("sno can't be zero")
print("bye")

output: without any exception
-------
hai
enter x value: 3
enter y value: 2
1.5
bye

output: with exception can be handled
------
hai
enter x value: 3
enter y value: 0
sno can't be zero
bye

ex2:
---
print("hai")
try:
    x=int(input("enter x value: "))
    y=int(input("enter y value: "))
    z=x/y
    print(z)
except Exception as e:
    print(e)
print("bye")

output:
-------
hai
enter x value: 3
enter y value: 2
1.5
bye

output2:
-------
hai
enter x value: 3
enter y value: 0
division by zero
bye

output3:
-------
hai
enter x value: 3
enter y value: 2.3
invalid literal for int() with base 10: '2.3'
bye







	
	







