Data Visualization/Reporting:
-----------------------------
	we can visualize the data by using matplotlib package.

	pip install matplotlib

ex1:
---
wap to create a simple plot graph?

import matplotlib.pyplot as plt
x=[2,8,6,4]
y=[9,3,7,5]
plt.plot(x,y)
plt.show()

ex2:
---
wap to create a plot graph?

import matplotlib.pyplot as plt
plt.plot([2,8,6,4],[9,3,7,5],label="first",color="red")
plt.plot([7,3,2,6],[9,4,8,5],label="second")
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Plot Graph")
plt.legend()
plt.show()

ex3:
---
wap to create a simple bar graph?

import matplotlib.pyplot as plt
plt.bar([2,8,6,4],[9,3,7,5],label="first",color="red")
plt.bar([7,3,2,6],[9,4,8,5],label="second")
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Bar Graph")
plt.legend()
plt.show()


ex4:
---
wap to create a simple Scatter plot?

import matplotlib.pyplot as plt
plt.scatter([2,8,6,4],[9,3,7,5],label="first",color="red")
plt.scatter([7,3,2,6],[9,4,8,5],label="second",marker="*")
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Scatter Graph")
plt.legend()
plt.show()

ex5:
---
wap to create a simple Pie chart?

import matplotlib.pyplot as plt
plt.title("Pie Chart")
marks=[76,23,56,61]
subjects=["Python","Flask","Django","MicroServices"]
cols=["red","blue","orange","purple"]
plt.pie(marks,labels=subjects,colors=cols)
plt.show()

ex6:
----
import matplotlib.pyplot as plt
plt.title("Pie Chart")
marks=[76,23,56,61]
subjects=["Python","Flask","Django","MicroServices"]
cols=["red","blue","orange","purple"]
plt.pie(marks,labels=subjects,colors=cols,startangle=90,
        shadow=True,explode=(0,0.1,0,0),autopct="%.2f%%")
plt.show()

proj: datascience related modules like pandas and Dataframe
-----
import pandas as pd 
import matplotlib.pyplot as plt 

def main_menu():
    print("\n------- Student Management System -------\n")
    print("1. Create/Import New Dataframe")
    print("2. Student Data Analysis")
    print("3. Student Data Visualisation")
    print("4. Export Dataframe to csv file")

def create_dataframe_menu():
    print("\n------- Create Dataframe -------\n")
    print("1. Create Dataframe")
    print("2. Import Dataframe from csv file")
    print("3. Add/Modify Custom Index")
    print("4. Add/Modify Custom Column Head")
    print("5. Return to main menu")

def analysis_menu():
    print("\n------- Data Analysis using Python -------\n")
    print("1.  Display All records")
    print("2.  Print first nth records")
    print("3.  Print last nth records")
    print("4.  Print All records in order of Name")
    print("5.  Display student with maximum marks")
    print("6.  Display student with minimum marks")
    print("7.  Display students who have secured passing marks")
    print("8.  Print distinct classes")
    print("9.  Add a row to Dataframe")
    print("10. Delete a row from Dataframe")
    print("11. Return to main menu")

def visualisation_menu():
    print("\n------- Visualisation using Matplotlib -------\n")
    print("1. Plot Line graph (Subject wise marks)")
    print("2. Plot Bar graph (Students, Marks)")
    print("3. Plot Horizontal Bar graph (Student, Class)")
    print("4. Return to main menu")
	
cols = ['admn','name','dob','class','marks']
df = pd.DataFrame([],columns = cols) # Create an EmptyDataFrame
while True:
    main_menu()
    ch = int(input("Select Option: "))
    if ch == 1:
        # Create New Dataframe
        create_dataframe_menu()
        ch = int(input("Select Option: "))
        if ch == 1:
            data = []
            while True:
                ch = input("Add Row [y/n]")
                if ch.lower() == 'y':
                    admn = int(input("Admission Number: "))
                    name = input("Student Name: ")
                    dob = input("DOB in dd-mm-yyyy format: ")
                    std = int(input("Class: "))
                    maths = float(input("Maths: "))
                    english = float(input("English: "))
                    science = float(input("Science: "))
                    marks = maths+english+science
                    data.append([admn, name, dob, std, marks])
                    df = pd.DataFrame(data, columns = cols)
                else:
                    break
            
        elif ch == 2:
            file = input("File name: ")
            df = pd.read_csv(file)
        elif ch == 3:
            index_list = input("Index List: ").split(",")
            df.index = index_list
        elif ch == 4:
            column_list= input("Column List: ").split(",")
            df.columns = column_list
        print(df)

    elif ch == 2:
        while True:
            # Student  Data Analysis
            analysis_menu()
            ch = int(input("Select Option: "))
            if ch == 1:
                print(df)
            elif ch == 2:
                nth = int(input("Enter no of rows to display: "))
                print(df.head(nth))
            elif ch == 3:
                nth = int(input("Enter number of rows to display: "))
                print(df.tail(nth))
            elif ch == 4:
                print(df.sort_values(by='name'))
            elif ch == 5:
                print(df[df['marks'] == df['marks'].max()])
            elif ch == 6:
                print(df[df.marks == df["marks"].min()])
            elif ch == 7:
                print(df[df['marks']*100/240 >= 33])
            elif ch == 8:
                print(df['class'].unique())
            elif ch == 9:
                while True:
                    ch = input("Add Row [y/n]")
                    if ch.lower() == 'y': 
                        admn = int(input("Admission Number: "))
                        name = input("Student Name: ")
                        dob = input("DOB in dd-mm-yyyy format: ")
                        std = int(input("Class: "))
                        maths = float(input("Maths: "))
                        english = float(input("English: "))
                        science = float(input("Science: "))
                        marks = maths+english+science
                        df = df.append({"admn": admn, "name":name,
                            "dob": dob, "class": std, "maths": maths,
                            "english": english, "science": science,
                            "marks": marks}, ignore_index=True)
                    else:
                        break
            elif ch == 10:
                print("1. Delete Row by Index")
                print("2. Delete Row by Admn No.")
                ch = int(input("Select Option: "))
                if ch == 1:
                    idx = int(input("Index to delete: "))
                    df = df.drop(index = idx)
                elif ch == 2:
                    admn = int(input("Admn no to delete: "))
                    df = df.drop(df[df["admn"] == admn].index)
                else:
                    print("Wrong Option Selected! ")
            else:
                print("Returning to main menu")
                break
    elif ch == 3:
        while True:
            # Student Data Visualisation
            visualisation_menu()
            ch = int(input("Select Option: "))
            if ch == 1:
                plt.plot(df['name'], df['marks'], label='marks', color = "blue", marker="*")
                plt.plot(df['name'], df['marks'], label='marks', color = "green", marker="*")
                plt.plot(df['name'], df['marks'], label='marks', color = "purple", marker="*")
                plt.xlabel("Student", fontsize=12)
                plt.ylabel("Marks", fontsize=12)
                plt.title("Subject Wise Marks of Students", fontsize=16)
                plt.legend()
                plt.show()
            elif ch == 2:
                x_values = df["name"]
                y_values = df['marks']
                plt.bar(x_values, y_values, color = 'orange')
                plt.xlabel("Students", fontsize=12)
                plt.ylabel("Marks", fontsize=12)
                plt.title("Students - Marks Visualisation", fontsize=14)
                plt.show()
            elif ch == 3:
                x_values = df["name"]
                y_values = df["class"]
                plt.barh(x_values, y_values, color = 'magenta')
                plt.xlabel("Students", fontsize=12)
                plt.ylabel("Class", fontsize=12)
                plt.title("Students - Class Visualisation", fontsize=16)
                plt.show()
            elif ch == 4:
                print("Returning to main menu")
                break
            else:
                print("Wrong Option Selected! ")
    elif ch == 4:
        # Export Dataframe to csv file
        file = input("File name: ")
        df.to_csv(file, index = False)
    elif ch == 5:
        # Exit
        print("Bye ...")
        exit()
    else:
        # Error Display and Exit
        print("Error! Wrong option selected. ")
        break

how to perform the static analysis of our source code?
-------------------------------------------------------
	we can perform the static analysis of our source code by using following libraries/packages,..

	pylint
	pychecker
	pyflakes
	....
	....

Pylint is a source-code, bug and quality checker for the Python programming language.

	pip install pylint

ex:
--
	demo.py
	------
x=10
y=20
print(x+y)

	output
	------
C:\Users\DELL\Desktop>pylint demo.py

************* Module demo
demo.py:1:0: C0114: Missing module docstring (missing-module-docstring)
demo.py:1:0: C0103: Constant name "x" doesn't conform to UPPER_CASE naming style (invalid-name)
demo.py:2:0: C0103: Constant name "y" doesn't conform to UPPER_CASE naming style (invalid-name)

-----------------------------------
Your code has been rated at 0.00/10

ex:
---
	demo.py
	-------
"""simple addition operation"""
X=10
Y=20
print(X+Y)

	output
	------
C:\Users\DELL\Desktop>pylint demo.py

--------------------------------------------------------------------
Your code has been rated at 10.00/10 (previous run: 0.00/10, +10.00)

ex3:
---
	demo.py
	-------
print("hai")
def add(x,y):
    z=x+y
    print(z)
add(4,5)

	output
	------
C:\Users\DELL\Desktop>pylint demo.py
************* Module demo
demo.py:1:0: C0114: Missing module docstring (missing-module-docstring)
demo.py:2:8: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
demo.py:2:10: C0103: Argument name "y" doesn't conform to snake_case naming style (invalid-name)
demo.py:2:0: C0116: Missing function or method docstring (missing-function-docstring)
demo.py:3:4: C0103: Variable name "z" doesn't conform to snake_case naming style (invalid-name)

--------------------------------------------------------------------
Your code has been rated at 0.00/10 (previous run: 10.00/10, -10.00)

ex4:
---
	demo.py
	-------
"""simple function example"""
print("hai")
def add(x_1,y_1):
    """addition operation"""
    z_1=x_1+y_1
    print(z_1)
add(4,5)

	output
	------
C:\Users\DELL\Desktop>pylint demo.py

-------------------------------------------------------------------
Your code has been rated at 10.00/10 (previous run: 0.00/10, +10.00)

ex5:
---
	demo.py
	-------
"""simple function example"""
print("hai")
MY_NAME="siva"
ARG_1=10
def add(x_1,y_1):
    """addition operation"""
    z_1=x_1+y_1
    print(z_1)
add(4,5)
ARG_1=10
  
	output
	------
C:\Users\DELL\Desktop>pylint demo.py

---------------------------------------
Your code has been rated at 10.00/10 


how to working with mysql database?
------------------------------------
	if we want to working mysql database to required following things.

	1).mysql server

	2).mysql server related python database API's
			mysql-connector-python
			mysqlclient


	C:\Python310\Scripts>pip install mysql-connector-python

how to show the databases in mysql?
-----------------------------------
mysql> show databases;

how to drop the databases in mysql?
----------------------------------
	drop database databasename;

mysql> drop database employes;


how to create a database in mysql?
-----------------------------------
	create database databasename;

mysql> create database employe;

ex:
---
wap to create a database in mysql through python script?

import mysql.connector
conn_obj=mysql.connector.connect(user="root",password="root",
                                 port="3306",host="localhost")
print("Connection Establish")
cur_obj=conn_obj.cursor()
print("before creating")
cur_obj.execute("show databases")
databases=[]
for db in cur_obj:
    databases.append(db)
print(databases)
print(len(databases))
cur_obj.execute("create database employe")
print("Database created successfully")
print("after creating")
cur_obj.execute("show databases")
databases=[]
for db in cur_obj:
    databases.append(db)
print(databases)
print(len(databases))
cur_obj.close()
conn_obj.close()
print("Connection Closeing")

output:
------
Connection Establish
before creating
[('bank',), ('cust',), ('customers',), ('fashion',), ('hello',), ('information_schema',), ('mysql',), ('performance_schema',), ('sakila',), ('students',), ('sys',), ('world',)]
12
Database created successfully
after creating
[('bank',), ('cust',), ('customers',), ('employe',), ('fashion',), ('hello',), ('information_schema',), ('mysql',), ('performance_schema',), ('sakila',), ('students',), ('sys',), ('world',)]
13
Connection Closeing

how to connect/use our database in mysql?
----------------------------------------
	use ourdatabasename

mysql> use employe
Database changed

how to display the tables in mysql?
-----------------------------------
	show tables

mysql> show tables;

ex:
---
wap to create a table in mysql through python script?

import mysql.connector
conn_obj=mysql.connector.connect(user="root",password="root",
                        port="3306",host="localhost",
                                 database="employe")
print("Connection Establish")
cur_obj=conn_obj.cursor()
cur_obj.execute("""create table emp(eid integer,
ename varchar(10),sal double(6,2),dno integer)""")
print("Table created successfully")
cur_obj.execute("insert into emp values(101,'siva',3000,10)")
cur_obj.execute("insert into emp values(102,'rama',2000,20)")
cur_obj.execute("insert into emp values(103,'sachin',3500,30)")
cur_obj.execute("insert into emp values(104,'dhoni',5000,10)")
cur_obj.execute("insert into emp values(105,'virat',2000,20)")
print("Records are Inserted Successfully")
cur_obj.execute("commit")
cur_obj.execute("select * from emp")
for rec in cur_obj:
    print(rec)
cur_obj.close()
conn_obj.close()
print("Connection Closeing")

output:
------
Connection Establish
Table created successfully
Records are Inserted Successfully
(101, 'siva', 3000.0, 10)
(102, 'rama', 2000.0, 20)
(103, 'sachin', 3500.0, 30)
(104, 'dhoni', 5000.0, 10)
(105, 'virat', 2000.0, 20)
Connection Closeing

 





