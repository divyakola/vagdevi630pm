builtin attributes of a class
------------------------------
	whenever we are creating a class internally our python interpreter to add some attributes to that class,that type of attributes are called builtin attributes of a class.

ex:
--
__doc__
	to return the documentation string of a class

__name__
	to return the name of the class

__bases__
	to return the base class name,in python by default object class is the super class of all other classes.

__module__
	to return the name of the module,in python by default every file act as a one module,that module is called main module.

__dict__
	to return the builtin attributes and user-defined attriubutes and methods in the form of dict object.

__init__
	it is a constructor

__del__
	it is a destructor

__mro__
	to return the method resolution order

__str__
	to return the string object

__repr__
	to return the original representation of an object

.....
.....etc.,

ex1:
----
class test:
    """simple test class example"""
    x=10
    y=2.3
    def m1(self):
        self.a=13
        print(test.x)
        print(test.y)
        print(self.a)
print(test.__doc__)
print('*'*20)
print(test.__name__)
print('*'*20)
print(test.__bases__)
print('*'*20)
print(test.__module__)
print('*'*20)
print(test.__dict__)


output:
------
simple test class example
********************
test
********************
(<class 'object'>,)
********************
__main__
********************
{
'__module__': '__main__',
'__doc__': 'simple test class example', 
'x': 10, 
'y': 2.3,
'm1': <function test.m1 at 0x000002351BEF63B0>, ...
}

how to access the data from one class into another class?
---------------------------------------------------------
	we can access the data from one class into another class in two ways,they are

	1).Has-A Relationship --> Association

	2).Is-A Relationship  --> Inheritance

Has-A Relationship
------------------
	in Has-A relationsship we can access the properties from one class into another class by using class name or reference variable.

ex:
--
class test:
    x=10
    def m1(self):
        self.y=20
        print(test.x)
        print(self.y)
class demo:
    a=1
    def m2(self):
        self.b=2
        print(demo.a)
        print(self.b)
        print(test.x)
        t1=test()
        t1.m1()
        print(t1.y)
d1=demo()
d1.m2()
        
output:
------
1
2
10
10
20
20


we can achive the association in two ways,they are

	1).Aggrigation

	2).Composition

Aggrigation:
------------
	week relationship between the object,i.e., without container object the contained object is alive.

	ex:
	---
		Car Has-A Engine

	here Car is a Container object
	     Engine is a Contained object

ex:
---
class Car:
    def __init__(self, engine):
        self.engine = engine
    def __del__(self):
        print("i am in destructor from car")
class Engine:
    def __init__(self):
        pass
    def __del__(self):
        print("i am in destructor from engine")
        
engine = Engine()
car = Car(engine)
# If I destroy this Car instance,
#the Engine instance still exists.
del car
print("bye")

output:
------
C:\Users\DELL\Desktop>python aggrigation.py
i am in destructor from car
bye
i am in destructor from engine


Composition:
------------
	strong relationship between the objects i.e., without container object there's no chance to exists the contained objects.

	ex:
	---
		Book Has-A Pages

		here Book is the Container object
		     pages are the contained objects


ex:
---
class Book:
    def __init__(self):
       page1 = Page('This is content for page 1')
       page2 = Page('This is content for page 2')
       self.pages = [page1, page2]
    def __del__(self):
        print("i am in destructor for book")
class Page:
    def __init__(self, content):
        self.content = content
    def __del__(self):
        print("i am in destructor for pages")
book = Book()
# If I destroy this Book instance,
# the Page instances are also destroyed
del book
print("bye")

output:
-------
C:\Users\DELL\Desktop>python composition.py
i am in destructor for book
i am in destructor for pages
i am in destructor for pages
bye





	



	



