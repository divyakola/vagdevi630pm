Is-A Relationship/Inheritance
------------------------------
	the concept of access the properties from one class into another class directly.

	if any class which extended by any another class,that class is called super/parent/base class.

	if any class which is extending by any another class,that class is called sub/child/derived class.

	java				python
	----				------
    class x				class x:
     {					     ------
       ----				     ------
       ----				class y(x):
     }					     -------
   class y extends x			     -------
     {
       -----
       -----
      }

in Is-A Relationship,we can access the properties from super class into sub class directly by using sub class name or sub class reference variable.

Is-A relationship is also known as a Inheritance.

ex:
----
class test:
    x=10
    def m1(self):
        self.y=20
        print(test.x)
        print(self.y)
class demo(test):
    a=1
    def m2(self):
        self.b=2
        print(demo.a)
        print(self.b)
        print(demo.x)
        print(self.y)
d1=demo()
d1.m1()
d1.m2()

output:
------
10
20
1
2
10
20

Types of Inheritances:
---------------------
	in Generally,the Inheritance can be categorized into 6-types,they are

	1).single-inheritance
	2).multi-level inheritance
	3).multiple inheritance
	4).Hierachical inheritance
	5).hybrid inheritance
	6).cyclic inheritance

single inheritance:
-------------------
	the concept of inherit/access/acquire the properties from only one class,is known as a single-inheritance.

ex:
---
class x:
    def m1(self):
        print("i am in m1")
class y(x):
    def m2(self):
        print("i am in m2")
y1=y()
y1.m1()
y1.m2()

output:
------
i am in m1
i am in m2

multi-level inheritance:
------------------------
	the concept of inherit/access/acquire the properties from multiple classes into single class with the concept of one after another,is known as a multi-level inheritance.

ex:
---
class x:
    def m1(self):
        print("i am in m1")
class y(x):
    def m2(self):
        print("i am in m2")
class z(y):
    def m3(self):
        print("i am in m3")
class a(z):
    def m4(self):
        print("i am in m4")

a1=a()
a1.m1()
a1.m2()
a1.m3()
a1.m4()

output:
------
i am in m1
i am in m2
i am in m3
i am in m4

Multiple Inheritance:
--------------------
	the concept of inherit/access/acquire the properties from multiple classes into single class with the concept of at a time,is known as a Multiple Inheritance.

what is MRO?
------------
MRO(Method Resolution Order)

whenever we are implement the multiple inheritance in that case we need to identify which class properties are executed first,which class properties are executed second,...,which class properties are executed last by using MRO concept.

	MRO=current class+BFS(Left to Right)
			     |
	                    currentclass+BFS(Left to Right)
			                  |
				  currentclass+BFS(Left to Right)
						....
						....
	mro()
	__mro__


ex:
---
class x:
    def m1(self):
        print("i am in m1")
class y:
    def m2(self):
        print("i am in m2")
class z:
    def m3(self):
        print("i am in m3")
class a(x,y,z):
    def m4(self):
        print("i am in m4")

a1=a()
a1.m1()
a1.m2()
a1.m3()
a1.m4()
print(a.mro())
print(a.__mro__)

output:
------
i am in m1
i am in m2
i am in m3
i am in m4
[<class '__main__.a'>, <class '__main__.x'>, <class '__main__.y'>, <class '__main__.z'>, <class 'object'>]

(<class '__main__.a'>, <class '__main__.x'>, <class '__main__.y'>, <class '__main__.z'>, <class 'object'>)

ex2:
----
class x:
    a=10
class y:
    a=5
class z(x,y):
    a=15
print(z.a)

output:
-----
15

ex13:
----
class x:
    a=10
class y:
    a=5
class z(y,x):
    pass
print(z.a)

output:
------
5

ex4:
---
class x:
    def m1(self):
        print("hai siva")
    def m3(self):
        print("hello krishna")
class y:
    def m2(self):
        print("hello rama")
    def m3(self):
        print("hello sachin")
class z(y,x):
    def m2(self):
        print("hai rama")
    def m4(self):
        print("hello seetha")
z1=z()
z1.m1()
z1.m2()
z1.m3()
z1.m4()

output:
------
hai siva
hai rama
hello sachin
hello seetha















	