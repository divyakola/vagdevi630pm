ex:
---
wap to create a function to perform a addition operation?

def add(x,y):
    """addition of two numbers"""
    z=x+y
    print(z)
add()

output:
-------
TypeError: add() missing 2 required positional arguments: 'x' and 'y'

ex2:
---
def add(x,y):
    """addition of two numbers"""
    z=x+y
    print(z)
add(3)

output:
------
TypeError: add() missing 1 required positional argument: 'y'

ex3:
----
def add(x,y):
    """addition of two numbers"""
    z=x+y
    print(z)
add(3,4)

output:
-----
7

types of arguments:
-------------------
in python,the arguments can be categorized into 3-types,
they are

	1).Normal Arguments

	2).Arbitrary Arguments

	3).Kw args

Normal Arguments:
---------------
	the Normal Arguments can be categorized into two types,they are

	1).Based on function Definition
		a).non-default parameters/arguments
		b).default parameters/arguments

	2).Based on function Calling
		a).non-keyword arguments
		b).keyword arguments

non-default parameters/arguments:
---------------------------------
	the programmer or developer dont assign the values to the parameters at the time of function definition,that type of arguments are called non-default arguments.

ex:
---
def add(x,y):
    z=x+y
    print(z)
add(3,4)

output:
-----
7

default parameters/arguments:
-----------------------------
	the programmer/developer to assign the values to the parameters at the time of function definition,that type of arguments are called default parameters/arguments.

ex:
---
def add(x=1,y=2):
    z=x+y
    print(z)
add(3,4)
add(3)
add()

output:
-------
7
5
3

mixing of both non-default and default arguments:
------------------------------------------------
def add(x,y=2):
    z=x+y
    print(z)
add(3,4)
add(3)

output:
-----
7
5

mixing of both default and non-default arguments:
------------------------------------------------
def add(x=1,y):
    z=x+y
    print(z)
add(3,4)

syntax error: non-default argument follow the default argument

note:
---
the non-default arguments never dont follow the default arguments.

non-keyword arguments:
---------------------
	the programmer or developer dont assign the parameters to the arguments at the time of function calling,that type of arguments are called non-keyword arguments.

	the non-keyword arguments are also called positional arguments.

ex:
---
def msg(x,y):
    print(x,"siva",y)
msg("hai","good evening")
msg("good evening","hai")

output:
-----
hai siva good evening
good evening siva hai

keyword arguments:
-------------------
	the programmer or developer to assign the parameters to the arguments at the time of function calling,that type of arguments are called keyword arguments.

ex:
---
def msg(x,y):
    print(x,"siva",y)
msg(x="hai",y="good evening")
msg(y="good evening",x="hai")

output:
-----
hai siva good evening
hai siva good evening


mixing of both non-keyword and keyword arguments:
-------------------------------------------------
def msg(x,y):
    print(x,"siva",y)
msg("hai",y="good evening")

output:
------
hai siva good evening

mixing of both keyword and non-keyword arguments:
-------------------------------------------------
def msg(x,y):
    print(x,"siva",y)
msg(x="hai","good evening")

syntax error: positional argument follow the keyword argument

note:
----
the positional/non-keyword argument never dont follow the keyword arguments.


the normal arguments takes exactly one value at a time.

ex1:
---
def f1(x):
    print(x)
f1()

output:
------
TypeError: f1() missing 1 required positional argument: 'x'

ex2:
---
def f1(x):
    print(x)
f1(3,4)

output:
------
TypeError: f1() takes 1 positional argument but 2 were given

ex3:
---
def f1(x):
    print(x)
f1(3)

output:
-----
3

the normal argument type is depends on the value of that argument.

ex:
---
def f1(x):
    print(x,type(x))
f1(3)
f1(2.3)
f1(4j)
f1("siva")
f1([5,6,3])
f1((4,3,7,2))
f1({5,3,7})
f1({'name':'siva','age':30})

output:
-----
3 <class 'int'>
2.3 <class 'float'>
4j <class 'complex'>
siva <class 'str'>
[5, 6, 3] <class 'list'>
(4, 3, 7, 2) <class 'tuple'>
{3, 5, 7} <class 'set'>
{'name': 'siva', 'age': 30} <class 'dict'>


Arbitrary arguments:
---------------------
the arbitrary arguments takes 0 or more values.

by default,the arbitrary argument type is tuple.

	syntax
	------
	def functionname(*parameter):
		-------
		-------
		-------

ex1:
---
def f1(*x):
    print(x,type(x))
f1()

output:
-----
() <class 'tuple'>

ex2:
---
def f1(*x):
    print(x,type(x))
f1(3)

output:
------
(3,) <class 'tuple'>

ex3:
----
def f1(*x):
    print(x,type(x))
f1(3,2.3,"siva",[5,6])

output:
------
(3, 2.3, 'siva', [5, 6]) <class 'tuple'>

mixing of both normal and arbitrary arguments:
------------------------------------------------

ex1:
---
def f1(x,*y):
    print(x,type(x))
    print(y,type(y))
f1()

output:
------
TypeError: f1() missing 1 required positional argument: 'x'

ex2:
---
def f1(x,*y):
    print(x,type(x))
    print(y,type(y))
f1(5)

output:
-----
5 <class 'int'>
() <class 'tuple'>

ex3:
---
def f1(x,*y):
    print(x,type(x))
    print(y,type(y))
f1(5,3.2,4j,False,"siva")

output:
-----
5 <class 'int'>
(3.2, 4j, False, 'siva') <class 'tuple'>












