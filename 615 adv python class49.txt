DataFrame:
----------
DataFrame is a Two-Dimensional Array with homogenious and hetrogenious data.

In DataFrame Rows are homogenious/hetrogenious but columns must be homogenious.

ex1:
---
wap to create a DataFrame by using list?

import pandas as pd
d=pd.DataFrame([[1,3,5],[2,4,6]])
print(d)

output:
------
   0  1  2
0  1  3  5
1  2  4  6

ex2:
----
import pandas as pd
d=pd.DataFrame([[1,3,5],[2,4,6]],index=["Odd","Even"])
print(d)

output:
-------
      0  1  2
Odd   1  3  5
Even  2  4  6

ex3:
----
wap to create a dataframe object by using zip()?

import pandas as pd
names=["siva","rama","krishna"]
sal=[2000,3000,1500]
ages=[29,31,30]
d=pd.DataFrame(zip(names,sal,ages),
               columns=["Names","Salary","Age"])
print(d)

output:
------
     Names  Salary  Age
0     siva    2000   29
1     rama    3000   31
2  krishna    1500   30

ex4:
---
wap to create a dataframe by using list comprihension?

import pandas as pd
d=pd.DataFrame([[i,i+1]for i in range(3)])
print(d)

output:
-------
   0  1
0  0  1
1  1  2
2  2  3

ex5:
----
wap to create a dataframe by using dictionary?

import pandas as pd
d=pd.DataFrame([{"name":"siva","age":29,"sal":3000},
                {"name":"rama","age":31,"sal":4000},
                {"name":"krishna","age":30,"sal":2000}])
print(d)

output:
------
      name  age   sal
0     siva   29  3000
1     rama   31  4000
2  krishna   30  2000

ex6:
---
import pandas as pd
d=pd.DataFrame([{"name":"siva","age":29,"sal":3000},
                {"name":"rama","sal":4000},
                {"name":"krishna","age":30}])
print(d)

output:
------
      name   age     sal
0     siva  29.0  3000.0
1     rama   NaN  4000.0
2  krishna  30.0     NaN

ex7:
----
import pandas as pd
d=pd.DataFrame([{"name":"siva","age":29,"sal":3000},
                {"name":"rama","sal":4000,},
                {"name":"krishna","age":30}])
print(d)
print('*'*20)
x=d.dropna()
print(x)
print('*'*20)
y=d.fillna(76)
print(y)
print('*'*20)
z=d.fillna(method="ffill")
print(z)
print('*'*20)
a=d.fillna(method="bfill")
print(a)

output:
-------
      name   age     sal
0     siva  29.0  3000.0
1     rama   NaN  4000.0
2  krishna  30.0     NaN
********************
   name   age     sal
0  siva  29.0  3000.0
********************
      name   age     sal
0     siva  29.0  3000.0
1     rama  76.0  4000.0
2  krishna  30.0    76.0
********************
      name   age     sal
0     siva  29.0  3000.0
1     rama  29.0  4000.0
2  krishna  30.0  4000.0
********************
      name   age     sal
0     siva  29.0  3000.0
1     rama  30.0  4000.0
2  krishna  30.0     NaN

ex8:
---
wap to write the dataframe into csv?

import pandas as pd
names=['siva','rama','krishna']
ages=[30,29,31]
sal=[2000,4000,3000]
d=pd.DataFrame(zip(names,ages,sal),
               columns=["Names","Ages","Salary"])
d.to_csv('myemp.csv',header=False,index=False)

output:
-------
	myemp.csv
	---------
siva,30,2000
rama,29,4000
krishna,31,3000

ex9:
---
wap to read the data from csv file and to create a DataFrame object?

	myemp.csv
	---------
siva,30,2000
rama,29,4000
krishna,31,3000


import pandas as pd

d=pd.read_csv('myemp.csv',
              names=["Names","Ages","Salary"])
print(d)
print('*'*20)
d=pd.read_csv('myemp.csv',header=None)
print(d)
print('*'*20)
d=pd.read_csv('myemp.csv')
print(d)

output:
------
     Names  Ages  Salary
0     siva    30    2000
1     rama    29    4000
2  krishna    31    3000
********************
         0   1     2
0     siva  30  2000
1     rama  29  4000
2  krishna  31  3000
********************
      siva  30  2000
0     rama  29  4000
1  krishna  31  3000

ex10:
---
wap to write the dataframe into json?

import pandas as pd
names=['siva','rama','krishna']
ages=[30,29,31]
sal=[2000,4000,3000]
d=pd.DataFrame(zip(names,ages,sal),
               columns=["Names","Ages","Salary"])
d.to_json('myemp.json')

output:
------
	myemp.json
	-----------
{"Names":{"0":"siva","1":"rama","2":"krishna"},"Ages":{"0":30,"1":29,"2":31},"Salary":{"0":2000,"1":4000,"2":3000}}

ex11:
---
wap to read the data from json file and to create a dataframe object?

	myemp.json
	-----------
{"Names":{"0":"siva","1":"rama","2":"krishna"},"Ages":{"0":30,"1":29,"2":31},"Salary":{"0":2000,"1":4000,"2":3000}}

import pandas as pd
print(pd.read_json('myemp.json'))

output:
------
     Names  Ages  Salary
0     siva    30    2000
1     rama    29    4000
2  krishna    31    3000

ex12:
---
wap to write the dataframe into html file?

import pandas as pd
names=['siva','rama','krishna']
ages=[30,29,31]
sal=[2000,4000,3000]
d=pd.DataFrame(zip(names,ages,sal),
               columns=["Names","Ages","Salary"])
d.to_html('myemp.html')

output:
------
	myemp.html
	----------
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Names</th>
      <th>Ages</th>
      <th>Salary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>siva</td>
      <td>30</td>
      <td>2000</td>
    </tr>
    <tr>
      <th>1</th>
      <td>rama</td>
      <td>29</td>
      <td>4000</td>
    </tr>
    <tr>
      <th>2</th>
      <td>krishna</td>
      <td>31</td>
      <td>3000</td>
    </tr>
  </tbody>
</table>

ex13:
----
wap to read the data from html and to convert dataframe object?

import pandas as pd
print(pd.read_html('myemp.html'))

output:
------
[   Unnamed: 0    Names  Ages  Salary
0           0     siva    30    2000
1           1     rama    29    4000
2           2  krishna    31    3000]

ex14:
----
import pandas as pd
names=['siva','rama','krishna',"sachin","dhoni"]
ages=[30,29,31,45,40]
sal=[2000,4000,3000,2000,4000]
d=pd.DataFrame(zip(names,ages,sal),
               columns=["Names","Ages","Salary"])
print(d)
print('*'*20)
print(d['Names'])
print('*'*20)
print(d['Salary'].max())
print(d['Salary'].min())
print(d['Salary'].sum())
print(d['Salary'].mean())
print('*'*20)
print(d['Salary'].sort_values())
print('*'*20)
print(d.sort_values('Salary'))
print('*'*20)
print(d.max())
print('*'*20)
print(d.head(2))
print('*'*20)
print(d.tail(2))

output:
------
     Names  Ages  Salary
0     siva    30    2000
1     rama    29    4000
2  krishna    31    3000
3   sachin    45    2000
4    dhoni    40    4000
********************
0       siva
1       rama
2    krishna
3     sachin
4      dhoni
Name: Names, dtype: object
********************
4000
2000
15000
3000.0
********************
0    2000
3    2000
2    3000
1    4000
4    4000
Name: Salary, dtype: int64
********************
     Names  Ages  Salary
0     siva    30    2000
3   sachin    45    2000
2  krishna    31    3000
1     rama    29    4000
4    dhoni    40    4000
********************
Names     siva
Ages        45
Salary    4000
dtype: object
********************
  Names  Ages  Salary
0  siva    30    2000
1  rama    29    4000
********************
    Names  Ages  Salary
3  sachin    45    2000
4   dhoni    40    4000

working with "numpy" package
----------------------------
	Numpy is a python package for numerical python i.e., to perform operation on mutidimensional arrays.

	pip install numpy

ex1:
---
wap to get the numpy version?

import numpy
print(numpy.__version__)

output:
------
1.22.2

ex2:
---
wap to get the numpy documentation?

import numpy
print(numpy.__doc__)


ex3:
---
wap to create empty numpy array?

import numpy
a=numpy.array([])
print(a)
print(type(a))

output:
------
[]
<class 'numpy.ndarray'>


ex4:
---
wap to create a single dimensional array?

import numpy
a=numpy.array([2,3,4])
print(a)
print(a.ndim)

output:
------
[2 3 4]
1

ex5:
---
import numpy
a=numpy.array([[[2,3,4]]])
print(a)
print(a.ndim)

output:
------
[[[2 3 4]]]
3

ex6:
----
import numpy
a=numpy.array([[1,2],[4,3]])
print(a)

output:
------
[[1 2]
 [4 3]]

ex7:
----
import numpy
a=numpy.arange(24)
b=numpy.array(a)
print(b)
print(b.shape)
print(b.size)
c=b.reshape(4,6)
print(c)
print(c.shape)
print(c.size)
d=b.reshape(8,3)
print(d)
print(d.shape)
print(d.size)

output:
------
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]

(24,)

24

[[ 0  1  2  3  4  5]
 [ 6  7  8  9 10 11]
 [12 13 14 15 16 17]
 [18 19 20 21 22 23]]

(4, 6)

24

[[ 0  1  2]
 [ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]
 [12 13 14]
 [15 16 17]
 [18 19 20]
 [21 22 23]]

(8, 3)

24

ex8:
---
import numpy
a=numpy.array([[1,3,6],[3,2,6],[7,2,3]])
print(a)
print('*'*20)
a.sort(axis=0)
print(a)
print('*'*20)
a.sort(axis=1)
print(a)

output:
------
[[1 3 6]
 [3 2 6]
 [7 2 3]]
********************
[[1 2 3]
 [3 2 6]
 [7 3 6]]
********************
[[1 2 3]
 [2 3 6]
 [3 6 7]]

ex9:
---
import numpy
a=numpy.zeros(2)
print(a)
print('*'*20)
b=numpy.zeros((2,2),dtype=int)
print(b)
print('*'*20)
c=numpy.ones(2)
print(c)
print('*'*20)
d=numpy.ones((2,2),dtype=int)
print(d)
print('*'*20)
e=numpy.identity(2)
print(e)
print('*'*20)
f=numpy.identity(2,dtype=int)
print(f)

output:
------
[0. 0.]
********************
[[0 0]
 [0 0]]
********************
[1. 1.]
********************
[[1 1]
 [1 1]]
********************
[[1. 0.]
 [0. 1.]]
********************
[[1 0]
 [0 1]]








