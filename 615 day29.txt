working with list class methods:
-------------------------------
	help(list)

	dir(list)

examples of magic/dunder methods:
--------------------------------
>>> x=[1,2,3]
>>> y=[4,5,6]
>>> x+y
[1, 2, 3, 4, 5, 6]
>>> x.__add__(y)
[1, 2, 3, 4, 5, 6]

>>> y=[4,5,6]
>>> len(y)
3
>>> y.__len__()
3

>>> y=[4,5,6]
>>> 5 in y
True
>>> y.__contains__(5)
True

>>> x=[1,2,3]
>>> y=[4,5,6]
>>> x==y
False
>>> x.__eq__(y)
False
>>> x!=y
True
>>> x.__ne__(y)
True

>>> y=[4,5,6]
>>> del y[1]
>>> y
[4, 6]
>>> y.__delitem__(-1)
>>> y
[4]

examples of normal methods:
---------------------------
append()
-------
to add the element into the list object at ending position only.

	listobj.append(iterableobj)

>>> x=[5,3.2,4j,"siva"]
>>> x
[5, 3.2, 4j, 'siva']
>>> x.append(9)
>>> x
[5, 3.2, 4j, 'siva', 9]
>>> x.append(False)
>>> x
[5, 3.2, 4j, 'siva', 9, False]
>>> x.append([6,7])
>>> x
[5, 3.2, 4j, 'siva', 9, False, [6, 7]]
>>> x.append("rama")
>>> x
[5, 3.2, 4j, 'siva', 9, False, [6, 7], 'rama']

copy()
-----
to create a shallow copy of a given list object.

	listobj.copy()

>>> x=[5,3.2,4j,"siva"]
>>> y=x #hardcopy
>>> z=x.copy() #shallowcopy
>>> x
[5, 3.2, 4j, 'siva']
>>> y
[5, 3.2, 4j, 'siva']
>>> id(x)
2183794245888
>>> id(y)
2183794245888
>>> z
[5, 3.2, 4j, 'siva']
>>> id(z)
2183794246144

count()
------
to return the no.of occurencess of given element in a list object.

	listobj.count(element)

>>> x=[10,20,30,10,20,30,40,10,]
>>> x.count(10)
3
>>> x.count(20)
2
>>> x.count(30)
2
>>> x.count(40)
1
>>> x.count(50)
0

>>> y=['a','b','c','a','b','d','c','a']
>>> y.count('a')
3
>>> y.count('d')
1
>>> y.count('e')
0

clear()
-----
to remove all the elements from the list object at a time

	listobj.clear()

>>> x=[5,3.2,4j,"siva"]
>>> x
[5, 3.2, 4j, 'siva']
>>> len(x)
4
>>> x.clear()
>>> x
[]
>>> len(x)
0

extend()
-------
	to extending the list object with our iterable object elements.

	listobj.extend(iterableobj)

ex1:
---
>>> x=[1,2,3]
>>> y=[4,5,6]
>>> x+y
[1, 2, 3, 4, 5, 6]
>>> x
[1, 2, 3]
>>> y
[4, 5, 6]

>>> a=[1,2,3]
>>> b=[4,5,6]
>>> a.extend(b)
>>> a
[1, 2, 3, 4, 5, 6]
>>> b
[4, 5, 6]

ex2:
----
>>> x=[1,2,3]
>>> y="siva"
>>> x+y
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate list (not "str") to list
>>> x.extend(y)
>>> x
[1, 2, 3, 's', 'i', 'v', 'a']
>>> y
'siva'

index()
-------
to return the positive index of first occurencess of given element in a list object from left to right.

	listobj.index(element)

ex1:
-----
>>> x=[10,20,30,40,50]
>>> x.index(10)
0
>>> x.index(30)
2
>>> x.index(40)
3
>>> x.index(70)
ValueError: 70 is not in list

ex2:
----
>>> y=[10,20,30,20,10,40,10,20,30,10]
>>> y.index(10)
0
>>> y.index(20)
1
>>> y.index(40)
5
>>> y.index(10,1)
4
>>> y.index(10,5)
6
>>> y.index(10,7)
9
>>> y.index(10,7,9)
ValueError: 10 is not in list

ex:
---
wap to return all the possible indexes of given element in a list object?

y=[10,20,30,20,10,40,10,20,30,10]
ele=int(input("enter your element: "))
for i in range(len(y)):
    if y[i]==ele:
        print(i)

output:
------
enter your element: 10
0
4
6
9

enter your element: 20
1
3
7

insert()
--------
to add the element into the list object at any position

	listobj.insert(index,element)

>>> x=[10,20,30,40,50]
>>> x
[10, 20, 30, 40, 50]
>>> x.insert(0,7)
>>> x
[7, 10, 20, 30, 40, 50]
>>> x.insert(2,17)
>>> x
[7, 10, 17, 20, 30, 40, 50]
>>> x.insert(x.index(30),35)
>>> x
[7, 10, 17, 20, 35, 30, 40, 50]
>>> x.insert(-1,55)
>>> x
[7, 10, 17, 20, 35, 30, 40, 55, 50]
>>> x.insert(len(x),56)
>>> x
[7, 10, 17, 20, 35, 30, 40, 55, 50, 56]
>>> x.insert(100,45)
>>> x
[7, 10, 17, 20, 35, 30, 40, 55, 50, 56, 45]
>>> x.index(45)
10























