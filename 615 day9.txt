		Objects
		-------
in python,everything treated as a objects

types of objects:
---------------
	scenario-1
	----------
	sequence objects
	non-sequence objects

	scenario-2
	-----------
	iterable objects
	non-iterable objects

	scenario-3
	---------
	mutable objects
	Immutable objects

sequence objects:
-----------------
	any object which follow the insertion order is preserved(both input order and output order will be same)concept,that type of objects are called sequence objects.

	ex: str,list,tuple,dict(from 3.4+ versions onwards),range,...

>>> x="siva"
>>> x
'siva'
>>> type(x)
<class 'str'>

>>> y=[6,3,7,9]
>>> y
[6, 3, 7, 9]
>>> type(y)
<class 'list'>

non-sequence objects:
---------------------
	any object which don't follow the insertion order is preserved(both input order and output order will not be same)concept,that type of objects are called non-sequence objects.

	ex: set,frozenset,dict(in python2.x and <3.5)

>>> x={6,9,5,8}
>>> x
{8, 9, 5, 6}
>>> type(x)
<class 'set'>

Iterable objects:
-----------------
we can use any object as a repeated purpose that type of objects are called Iterable objects.

	(or)

we can apply the iterations on any objects,that type of objects are called Iterable objects.

	ex: str,list,tuple,set,frozenset,dict,range,....

ex:
---
>>> x="siva"
>>> y="hello good evening"
>>> for i in x:
        print(y)

hello good evening
hello good evening
hello good evening
hello good evening

>>> a=[6,3,7,2,9]
>>> for j in a:
        print(y)

hello good evening
hello good evening
hello good evening
hello good evening
hello good evening

>>> for j in a:
        print(y,j)

hello good evening 6
hello good evening 3
hello good evening 7
hello good evening 2
hello good evening 9

Non-Iterable objects:
-----------------
we can't use any object as a repeated purpose that type of objects are called Non-Iterable objects.

	(or)

we can't apply the iterations on any objects,that type of objects are called Non-Iterable objects.

	ex: int,float,complex,bool

>>> x=5637
>>> y="hai siva good evening"
>>> for i in x:
        print(y)


TypeError: 'int' object is not iterable


Mutable objects:
----------------
any object which allows to modify(insert,delete,update) the data,that type of objects are called Mutable objects.

	ex: list,set,dict,bytearray,.....

ex:
---
>>> x=[6,3,8,9]
>>> x
[6, 3, 8, 9]
>>> type(x)
<class 'list'>
>>> id(x)
2283083566592
>>> x[1]
3
>>> x[1]=30
>>> x
[6, 30, 8, 9]
>>> id(x)
2283083566592

Immutable objects:
------------------
any object which don't allows to modify(insert,delete,update) the data,that type of objects are called Immutable objects.

	ex: int,float,complex,bool,str,tuple,frozenset,bytes,...

ex:
---
>>> y=(5,9,7,3)
>>> y
(5, 9, 7, 3)
>>> type(y)
<class 'tuple'>
>>> id(y)
2283083613184
>>> y[1]
9
>>> y[1]=90
TypeError: 'tuple' object does not support item assignment
	
note:
----
whenever we are trying to modify the immutable objects data that is not modified to create a new object in the memory location.

>>> x=10
>>> x
10
>>> id(x)
2283080936016
>>> x=15
>>> x
15
>>> id(x)
2283080936176

different immutable objects haveing the same data but referenceing to same object in the memory location.

ex1:
---
	sample.py
	--------
x=10
y=10
z=10
print(id(x))
print(id(y))
print(id(z))

	output
	-----
C:\Users\DELL\Desktop>python sample.py
2517476600400
2517476600400
2517476600400

ex2:
---
	sample.py
	---------
x="hai siva krishna"
y="hai siva krishna"
z="hai siva krishna"
print(id(x))
print(id(y))
print(id(z))

	output
	------
C:\Users\DELL\Desktop>python sample.py
2595204213696
2595204213696
2595204213696

ex3:
---
	sample.py
	---------
x=(1,2,3,4)
y=(1,2,3,4)
z=(1,2,3,4)
print(id(x))
print(id(y))
print(id(z))

	output
	------
C:\Users\DELL\Desktop>python sample.py
2169062008368
2169062008368
2169062008368


different mutable objects haveing the same data but referenceing to different objects in the memory location.

ex4:
----
	sample.py
	---------
x=[1,2,3,4]
y=[1,2,3,4]
z=[1,2,3,4]
print(id(x))
print(id(y))
print(id(z))

	output
	------
C:\Users\DELL\Desktop>python sample.py
2284570957440
2284571233664
2284571233728

ex5:
----
	sample.py
	---------
x=[1,2,[3,4]]
y=[1,2,[3,4]]
z=[1,2,[3,4]]
print(id(x))
print(id(y))
print(id(z))
print('*'*16)
print(id(x[0]))
print(id(y[0]))
print(id(z[0]))
print('*'*16)
print(id(x[2]))
print(id(y[2]))
print(id(z[2]))
print('*'*16)
print(id(x[2][0]))
print(id(y[2][0]))
print(id(z[2][0]))

	output
	------
C:\Users\DELL\Desktop>python sample.py
2935285386752
2935285386688
2935285109632
****************
2935282755888
2935282755888
2935282755888
****************
2935285110400
2935285386816
2935285110016
****************
2935282755952
2935282755952
2935282755952		












